[{"content":" Troubleshooting QMK Console HID Device Access on Linux If you\u0026rsquo;re getting the error HIDException: unable to open device when trying to open a QMK console on Linux, it\u0026rsquo;s likely due to a lack of permissions to access the HID device. Here’s how you can resolve the issue step-by-step.\nIdentify the Vendor and Product IDs First off, we need to identify the vendor and product IDs of your HID device. You\u0026rsquo;ll usually see this ID in the error message:\nCould not connect to \u0026lt;vendor-name\u0026gt; \u0026lt;device-name\u0026gt; (:\u0026lt;vendor-id\u0026gt;:\u0026lt;product-id\u0026gt;:1): HIDException: unable to open device Alternatively, you can check this by running the following command in the terminal:\nlsusb Look for an entry that relates to your device—for instance, something labeled \u0026ldquo;Keyboard\u0026rdquo; or \u0026ldquo;Mouse.\u0026rdquo; The result will look something like:\nBus 001 Device 005: ID \u0026lt;vendor-id\u0026gt;:\u0026lt;product-id\u0026gt; Note down the vendor and product IDs from this output.\nCreate a udev Rule File Next, we\u0026rsquo;re going to create a udev rule file to grant permissions for your HID device. Open a terminal and type:\nsudo nano /etc/udev/rules.d/70-qmk-hid.rules The name 70-qmk-hid.rules follows the udev rules naming convention (\u0026lt;order\u0026gt;-\u0026lt;name\u0026gt;.rules). The 70- ensures the rule is loaded after the default udev rules, and qmk-hid indicates that the rule is related to QMK and HID devices. The name can be arbitrary as long as it follows the convention.\nAdd the udev Rule In the file you just created, add the following line. Replace xxxx with your vendor ID and yyyy with your product ID:\nSUBSYSTEM==\u0026#34;hidraw\u0026#34;, ATTRS{idVendor}==\u0026#34;xxxx\u0026#34;, ATTRS{idProduct}==\u0026#34;yyyy\u0026#34;, TAG+=\u0026#34;uaccess\u0026#34; Apply the udev Rule Save the file and exit the text editor. Reload the udev rules by entering: sudo udevadm control --reload-rules Unplug and replug your HID device to apply the new rule. This step is crucial and often overlooked. After following these steps, you should be able to access the HID device and open the QMK console without running into any permission issues.\nTroubleshooting If you’re still encountering problems, you can try adding the MODE=\u0026quot;0666\u0026quot; option to the udev rule. This grants read and write permissions to all users:\nSUBSYSTEM==\u0026#34;hidraw\u0026#34;, ATTRS{idVendor}==\u0026#34;xxxx\u0026#34;, ATTRS{idProduct}==\u0026#34;yyyy\u0026#34;, TAG+=\u0026#34;uaccess\u0026#34;, MODE=\u0026#34;0666\u0026#34; Remember, you\u0026rsquo;ll need to reload the udev rules and reconnect the device after making any changes to the rules file.\nBy following these steps, you should be able to troubleshoot and resolve the HIDException error. If you hit any snags, don\u0026rsquo;t hesitate to search for help in the QMK or Linux communities—they\u0026rsquo;re usually pretty resourceful!\n","date":"August 24, 2024","permalink":"/posts/hid-exception/","summary":"Troubleshooting QMK Console HID Device Access on Linux If you\u0026rsquo;re getting the error HIDException: unable to open device when trying to open a QMK console on Linux, it\u0026rsquo;s likely due to a lack of permissions to access the HID device.","title":"Hid Exception","type":"posts"},{"content":" How I Landed on the RP2040 for My Custom Keyboard Project Building a custom keyboard is full of decisions, and one of the most critical is choosing the right microcontroller (MCU). After weighing my options, I ultimately chose the RP2040, even though it’s not the usual go-to in the custom keyboard community. Here’s how I arrived at that decision.\n(Curious about why I’m building my own keyboard in the first place? You can find that story in my earlier article.)\nThe Spark: A Video by Jan Lunge My exploration of the RP2040 began with a video by Jan Lunge. In it, he shared his journey of building not just a keyboard, but the entire environment around it, using KMK firmware. Jan’s deep dive into the RP2040’s capabilities piqued my interest. He made a compelling case for the MCU’s power, which got me thinking: could this be the right choice for my own project? You can watch Jan\u0026rsquo;s video here .\nThe Powerhouse RP2040 What really sold me on the RP2040 was its raw capability. Now, I’m no expert in microcontroller specs, but it was clear that the RP2040 offers more processing power and memory than the standard MCUs you usually see in keyboard builds. Since I plan to pack my keyboard with features like 10 layers, RGB backlighting, custom macros, haptic feedback, and maybe even an OLED display, I needed something that could handle all of that without lagging.\nQMK Compatibility and Solid Documentation Despite Jan’s success with KMK, I was hesitant at first because I wanted to use QMK—largely for its popularity and strong support for features like RGB matrices. That hesitation didn’t last long. I discovered that QMK added support for the RP2040 in late 2021, and the documentation has been improving ever since. A quick glance through the QMK documentation for the RP2040 reassured me that I’d have enough resources to work with.\nMoreover, Raspberry Pi’s documentation and datasheets for the RP2040 are nothing short of comprehensive. Having detailed guidelines from both QMK and Raspberry Pi made me confident that I could tackle any challenges that might come up.\nCommunity Support and Looking Ahead Another big factor was the growing community around the RP2040 in custom keyboards. As more people start using this MCU, the shared knowledge base is expanding, which is a huge plus for anyone like me, who’s just starting out with it.\nThis is still the beginning of my journey with the RP2040. I plan to share more stories about the build process, the challenges, and how I overcome them in future blog posts. If you’re thinking about using the RP2040 for your own keyboard, stay tuned—I’ll be documenting everything from firmware tweaks to hardware integration.\ndisclaimer/acknowledgement: This article writing process is assisted by AI to make it more enjoyable to read. However, the content is authentic from my own research and experience.\n","date":"August 24, 2024","permalink":"/posts/why-rp2040/","summary":"How I Landed on the RP2040 for My Custom Keyboard Project Building a custom keyboard is full of decisions, and one of the most critical is choosing the right microcontroller (MCU).","title":"Why Rp2040","type":"posts"}]